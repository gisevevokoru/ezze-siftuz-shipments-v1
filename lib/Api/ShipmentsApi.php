<?php
/**
 * ShipmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  EzzeSiftuz\ShipmentsV1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shipments
 *
 * This interface describes all endpoints regarding the shipment domain.
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EzzeSiftuz\ShipmentsV1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EzzeSiftuz\ShipmentsV1\ApiException;
use EzzeSiftuz\ShipmentsV1\Configuration;
use EzzeSiftuz\ShipmentsV1\HeaderSelector;
use EzzeSiftuz\ShipmentsV1\ObjectSerializer;

/**
 * ShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  EzzeSiftuz\ShipmentsV1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation appendPositionItemsByCarrierAndTrackingNumberUsingPOST
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body The position items included in shipment. (required)
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appendPositionItemsByCarrierAndTrackingNumberUsingPOST($body, $carrier, $tracking_number)
    {
        $this->appendPositionItemsByCarrierAndTrackingNumberUsingPOSTWithHttpInfo($body, $carrier, $tracking_number);
    }

    /**
     * Operation appendPositionItemsByCarrierAndTrackingNumberUsingPOSTWithHttpInfo
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body The position items included in shipment. (required)
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appendPositionItemsByCarrierAndTrackingNumberUsingPOSTWithHttpInfo($body, $carrier, $tracking_number)
    {
        $returnType = '';
        $request = $this->appendPositionItemsByCarrierAndTrackingNumberUsingPOSTRequest($body, $carrier, $tracking_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\BadRequestAddPositionItemByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\NotFoundAddPositionItemByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\ConflictAddPositionItemByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\InternalServerErrorAddPositionItemByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsync
     *
     * 
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body The position items included in shipment. (required)
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsync($body, $carrier, $tracking_number)
    {
        return $this->appendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsyncWithHttpInfo($body, $carrier, $tracking_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsyncWithHttpInfo
     *
     * 
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body The position items included in shipment. (required)
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsyncWithHttpInfo($body, $carrier, $tracking_number)
    {
        $returnType = '';
        $request = $this->appendPositionItemsByCarrierAndTrackingNumberUsingPOSTRequest($body, $carrier, $tracking_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appendPositionItemsByCarrierAndTrackingNumberUsingPOST'
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body The position items included in shipment. (required)
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appendPositionItemsByCarrierAndTrackingNumberUsingPOSTRequest($body, $carrier, $tracking_number)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling appendPositionItemsByCarrierAndTrackingNumberUsingPOST'
            );
        }
        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling appendPositionItemsByCarrierAndTrackingNumberUsingPOST'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling appendPositionItemsByCarrierAndTrackingNumberUsingPOST'
            );
        }

        $resourcePath = '/shipments/carriers/{carrier}/trackingnumbers/{trackingNumber}/positionitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier !== null) {
            $resourcePath = str_replace(
                '{' . 'carrier' . '}',
                ObjectSerializer::toPathValue($carrier),
                $resourcePath
            );
        }
        // path params
        if ($tracking_number !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($tracking_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appendPositionItemsUsingPOST
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body positionItems (required)
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appendPositionItemsUsingPOST($body, $shipment_id)
    {
        $this->appendPositionItemsUsingPOSTWithHttpInfo($body, $shipment_id);
    }

    /**
     * Operation appendPositionItemsUsingPOSTWithHttpInfo
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body positionItems (required)
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appendPositionItemsUsingPOSTWithHttpInfo($body, $shipment_id)
    {
        $returnType = '';
        $request = $this->appendPositionItemsUsingPOSTRequest($body, $shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\BadRequestAddPositionItemByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\NotFoundAddPositionItemByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\ConflictAddPositionItemByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\InternalServerErrorAddPositionItemByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appendPositionItemsUsingPOSTAsync
     *
     * 
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body positionItems (required)
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendPositionItemsUsingPOSTAsync($body, $shipment_id)
    {
        return $this->appendPositionItemsUsingPOSTAsyncWithHttpInfo($body, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appendPositionItemsUsingPOSTAsyncWithHttpInfo
     *
     * 
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body positionItems (required)
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendPositionItemsUsingPOSTAsyncWithHttpInfo($body, $shipment_id)
    {
        $returnType = '';
        $request = $this->appendPositionItemsUsingPOSTRequest($body, $shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appendPositionItemsUsingPOST'
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\PositionItem[] $body positionItems (required)
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appendPositionItemsUsingPOSTRequest($body, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling appendPositionItemsUsingPOST'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling appendPositionItemsUsingPOST'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/positionitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createdAndSentShipmentUsingPOST
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentRequest $body request (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentResponse
     */
    public function createdAndSentShipmentUsingPOST($body)
    {
        list($response) = $this->createdAndSentShipmentUsingPOSTWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createdAndSentShipmentUsingPOSTWithHttpInfo
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentRequest $body request (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createdAndSentShipmentUsingPOSTWithHttpInfo($body)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\CreateShipmentResponse';
        $request = $this->createdAndSentShipmentUsingPOSTRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\Unauthenticated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\Conflict',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createdAndSentShipmentUsingPOSTAsync
     *
     * 
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentRequest $body request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createdAndSentShipmentUsingPOSTAsync($body)
    {
        return $this->createdAndSentShipmentUsingPOSTAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createdAndSentShipmentUsingPOSTAsyncWithHttpInfo
     *
     * 
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentRequest $body request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createdAndSentShipmentUsingPOSTAsyncWithHttpInfo($body)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\CreateShipmentResponse';
        $request = $this->createdAndSentShipmentUsingPOSTRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createdAndSentShipmentUsingPOST'
     *
     * @param  \EzzeSiftuz\ShipmentsV1\Model\CreateShipmentRequest $body request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createdAndSentShipmentUsingPOSTRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createdAndSentShipmentUsingPOST'
            );
        }

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentsUsingGET
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\ShipmentsV1\Model\ShipmentList
     */
    public function listShipmentsUsingGET($datefrom, $limit = '25', $next = null)
    {
        list($response) = $this->listShipmentsUsingGETWithHttpInfo($datefrom, $limit, $next);
        return $response;
    }

    /**
     * Operation listShipmentsUsingGETWithHttpInfo
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\ShipmentsV1\Model\ShipmentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listShipmentsUsingGETWithHttpInfo($datefrom, $limit = '25', $next = null)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\ShipmentList';
        $request = $this->listShipmentsUsingGETRequest($datefrom, $limit, $next);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\ShipmentList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\InternalServerErrorGetShipmentList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentsUsingGETAsync
     *
     * 
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentsUsingGETAsync($datefrom, $limit = '25', $next = null)
    {
        return $this->listShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit, $next)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentsUsingGETAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit = '25', $next = null)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\ShipmentList';
        $request = $this->listShipmentsUsingGETRequest($datefrom, $limit, $next);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentsUsingGET'
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. The date is considered as UTC. (required)
     * @param  int $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShipmentsUsingGETRequest($datefrom, $limit = '25', $next = null)
    {
        // verify the required parameter 'datefrom' is set
        if ($datefrom === null || (is_array($datefrom) && count($datefrom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $datefrom when calling listShipmentsUsingGET'
            );
        }

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datefrom !== null) {
            $queryParams['datefrom'] = ObjectSerializer::toQueryValue($datefrom);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($next !== null) {
            $queryParams['next'] = ObjectSerializer::toQueryValue($next);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentByCarrierAndTrackingNumberUsingGET
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\ShipmentsV1\Model\Shipment
     */
    public function shipmentByCarrierAndTrackingNumberUsingGET($carrier, $tracking_number)
    {
        list($response) = $this->shipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $tracking_number);
        return $response;
    }

    /**
     * Operation shipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\ShipmentsV1\Model\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $tracking_number)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\Shipment';
        $request = $this->shipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $tracking_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\ForbiddenGetShipmentByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\NotFoundGetShipmentByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\InternalServerErrorGetShipmentByTrackingNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentByCarrierAndTrackingNumberUsingGETAsync
     *
     * 
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentByCarrierAndTrackingNumberUsingGETAsync($carrier, $tracking_number)
    {
        return $this->shipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $tracking_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $tracking_number)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\Shipment';
        $request = $this->shipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $tracking_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentByCarrierAndTrackingNumberUsingGET'
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $tracking_number The tracking number of the shipment assigned by the carrier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $tracking_number)
    {
        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling shipmentByCarrierAndTrackingNumberUsingGET'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling shipmentByCarrierAndTrackingNumberUsingGET'
            );
        }

        $resourcePath = '/shipments/carriers/{carrier}/trackingnumbers/{trackingNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($carrier !== null) {
            $resourcePath = str_replace(
                '{' . 'carrier' . '}',
                ObjectSerializer::toPathValue($carrier),
                $resourcePath
            );
        }
        // path params
        if ($tracking_number !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($tracking_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentUsingGET
     *
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\ShipmentsV1\Model\Shipment
     */
    public function shipmentUsingGET($shipment_id)
    {
        list($response) = $this->shipmentUsingGETWithHttpInfo($shipment_id);
        return $response;
    }

    /**
     * Operation shipmentUsingGETWithHttpInfo
     *
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \EzzeSiftuz\ShipmentsV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\ShipmentsV1\Model\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentUsingGETWithHttpInfo($shipment_id)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\Shipment';
        $request = $this->shipmentUsingGETRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\ForbiddenGetShipmentByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\NotFoundGetShipmentByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\ShipmentsV1\Model\InternalServerErrorGetShipmentByShipmentId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentUsingGETAsync
     *
     * 
     *
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentUsingGETAsync($shipment_id)
    {
        return $this->shipmentUsingGETAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentUsingGETAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentUsingGETAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '\EzzeSiftuz\ShipmentsV1\Model\Shipment';
        $request = $this->shipmentUsingGETRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentUsingGET'
     *
     * @param  string $shipment_id Internal shipment identifier assigned by OTTO Market. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentUsingGETRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling shipmentUsingGET'
            );
        }

        $resourcePath = '/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
